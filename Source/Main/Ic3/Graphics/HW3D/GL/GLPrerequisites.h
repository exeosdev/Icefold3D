
#pragma once

#ifndef __IC3_GRAPHICS_HW3D_GLCOMMON_PREREQUISITES_H__
#define __IC3_GRAPHICS_HW3D_GLCOMMON_PREREQUISITES_H__

#include <Ic3/Graphics/GCI/Memory/CommonGPUMemoryDefs.h>
#include <Ic3/System/OpenGLDriver.h>

#define ICFGX_GL_PLATFORM_TYPE_DESKTOP 0x7100
#define ICFGX_GL_PLATFORM_TYPE_ES   0x7200

#define ICFGX_GL_TARGET_GL32 0x8100
#define ICFGX_GL_TARGET_GL43 0x8200
#define ICFGX_GL_TARGET_ES31 0x8300

#if( IC3_SYSTEM_GL_PLATFORM_TYPE == IC3_SYSTEM_GL_PLATFORM_TYPE_DESKTOP )
#  define ICFGX_GL_PLATFORM_TYPE ICFGX_GL_PLATFORM_TYPE_DESKTOP
#elif( IC3_SYSTEM_GL_PLATFORM_TYPE == IC3_SYSTEM_GL_PLATFORM_TYPE_ES )
#  define ICFGX_GL_PLATFORM_TYPE ICFGX_GL_PLATFORM_TYPE_ES
#else
#  if( !GL_PLATFORM_TYPE_DESKTOP && GL_PLATFORM_TYPE_ES )
#    define ICFGX_GL_PLATFORM_TYPE ICFGX_GL_PLATFORM_TYPE_ES
#  elif( GL_PLATFORM_TYPE_DESKTOP )
#    define ICFGX_GL_PLATFORM_TYPE ICFGX_GL_PLATFORM_TYPE_DESKTOP
#  else
#    error "Invalid GL Platform Type"
#  endif
#endif

#if ( ICFGX_GL_PLATFORM_TYPE == ICFGX_GL_PLATFORM_TYPE_DESKTOP ) && defined( IC3_DRIVER_GRAPHICS_HW3D_GL3_BUILD )
#  define ICFGX_GL_TARGET ICFGX_GL_TARGET_GL32
#endif
#if ( ICFGX_GL_PLATFORM_TYPE == ICFGX_GL_PLATFORM_TYPE_DESKTOP ) && defined( IC3_DRIVER_GRAPHICS_HW3D_GL4_BUILD )
#  define ICFGX_GL_TARGET ICFGX_GL_TARGET_GL43
#endif
#if ( ICFGX_GL_PLATFORM_TYPE == ICFGX_GL_PLATFORM_TYPE_ES ) && defined( IC3_DRIVER_GRAPHICS_HW3D_GLES3_BUILD )
#  define ICFGX_GL_TARGET ICFGX_GL_TARGET_ES31
#endif

#  define ICFGX_GL_TARGET ICFGX_GL_TARGET_GL43

#if !defined( ICFGX_GL_TARGET )
#  error ""
#endif

#define ICFGX_GL_FEATURE_SUPPORT_BUFFER_PERSISTENT_MAP \
	( ICFGX_GL_TARGET == ICFGX_GL_TARGET_GL43 )

#define ICFGX_GL_FEATURE_SUPPORT_DEBUG_OUTPUT \
	( IC3_SYSTEM_GL_PLATFORM_TYPE == IC3_SYSTEM_GL_PLATFORM_TYPE_DESKTOP )

#define ICFGX_GL_FEATURE_SUPPORT_PRIMITIVE_FILL_MODE \
	( IC3_SYSTEM_GL_PLATFORM_TYPE == IC3_SYSTEM_GL_PLATFORM_TYPE_DESKTOP )

#define ICFGX_GL_FEATURE_SUPPORT_PRIMITIVE_TYPE_ADJACENCY \
	( IC3_SYSTEM_GL_PLATFORM_TYPE == IC3_SYSTEM_GL_PLATFORM_TYPE_DESKTOP )

#define ICFGX_GL_FEATURE_SUPPORT_PRIMITIVE_TYPE_PATCHES \
	( ICFGX_GL_TARGET == ICFGX_GL_TARGET_GL43 )

#define ICFGX_GL_FEATURE_SUPPORT_SHADER_PIPELINE_OBJECT \
	( ( ICFGX_GL_TARGET == ICFGX_GL_TARGET_GL43 ) || ( ICFGX_GL_TARGET == ICFGX_GL_TARGET_ES31 ) )

#define ICFGX_GL_FEATURE_SUPPORT_SHADER_TYPE_GEOMETRY \
	( IC3_SYSTEM_GL_PLATFORM_TYPE == IC3_SYSTEM_GL_PLATFORM_TYPE_DESKTOP )

#define ICFGX_GL_FEATURE_SUPPORT_SHADER_TYPE_TESSELATION \
	( ICFGX_GL_TARGET == ICFGX_GL_TARGET_GL43 )

#define ICFGX_GL_FEATURE_SUPPORT_SHADER_TYPE_COMPUTE \
	( ( ICFGX_GL_TARGET == ICFGX_GL_TARGET_GL43 ) || ( ICFGX_GL_TARGET == ICFGX_GL_TARGET_ES31 ) )

#define ICFGX_GL_FEATURE_SUPPORT_TEXTURE_ANISOTROPIC_FILTER \
	( IC3_SYSTEM_GL_PLATFORM_TYPE == IC3_SYSTEM_GL_PLATFORM_TYPE_DESKTOP )

#define ICFGX_GL_FEATURE_SUPPORT_TEXTURE_EXTENDED_ADDRESS_MODE \
	( IC3_SYSTEM_GL_PLATFORM_TYPE == IC3_SYSTEM_GL_PLATFORM_TYPE_DESKTOP )

#define ICFGX_GL_FEATURE_SUPPORT_TEXTURE_FORMAT_BGR \
	( IC3_SYSTEM_GL_PLATFORM_TYPE == IC3_SYSTEM_GL_PLATFORM_TYPE_DESKTOP )

#define ICFGX_GL_FEATURE_SUPPORT_TEXTURE_FORMAT_COMPRESSED_BCX \
	( IC3_SYSTEM_GL_PLATFORM_TYPE == IC3_SYSTEM_GL_PLATFORM_TYPE_DESKTOP )

#if( IC3_BUILD_STATIC )
#  define ICFGX_GL_API
#  define ICFGX_GL_CLASS
#  define ICFGX_GL_OBJ    extern
#else
#  if( IC3_DRIVER_GRAPHICS_HW3D_GLCOMMON_BUILD )
#    define ICFGX_GL_API    IC3_PCL_ATTR_DLL_EXPORT
#    define ICFGX_GL_CLASS  IC3_PCL_ATTR_DLL_EXPORT
#    define ICFGX_GL_OBJ    IC3_PCL_ATTR_DLL_EXPORT
#  else
#    define ICFGX_GL_API    IC3_PCL_ATTR_DLL_IMPORT
#    define ICFGX_GL_CLASS  IC3_PCL_ATTR_DLL_IMPORT
#    define ICFGX_GL_OBJ    IC3_PCL_ATTR_DLL_IMPORT
#  endif
#endif

#include "Prerequisites/GLCommonDefs.h"
#include "Prerequisites/GLDebugOutput.h"
#include "Prerequisites/GLObject.h"

namespace Ic3::Graphics::GCI
{

	class RenderPassConfigurationImmutableStateDefault;

	class GLBlendImmutableState;
	class GLDepthStencilImmutableState;
	class GLRasterizerImmutableState;
	class GLGraphicsShaderLinkageImmutableState;
	class GLIAInputLayoutImmutableState;
	class GLIAVertexStreamImmutableState;
	class GLRenderTargetBindingImmutableState;

	ic3GpaDeclareClassHandle( GLCommandList );
	ic3GpaDeclareClassHandle( GLCommandSystem );
	ic3GpaDeclareClassHandle( GLGPUDevice );
	ic3GpaDeclareClassHandle( GLGPUDriver );
	ic3GpaDeclareClassHandle( GLPresentationLayer );

	ic3GpaDeclareTypedefHandle( GLRenderPassConfigurationImmutableState, RenderPassConfigurationImmutableStateDefault );

} // namespace Ic3::Graphics::GCI

#endif // __IC3_GRAPHICS_HW3D_GLCOMMON_PREREQUISITES_H__
